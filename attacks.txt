Attack 1:
We can send GET requests to arbitrary filepaths that are in our home directory from our webserver, since the server allows 
people to load the content of all of the files that exist inside the home directory. Therefore, that means that we can send a 
request such as http://192.168.26.3:8080/http.c, and a potential attacker can read the source code for the webserver to look 
for any vulnerabilities in the C code. Furthermore, the databases are also able to be pulled using a GET command, which allows 
for attackers to get a list of all users and hashed passwords, which they could try match it against rainbow tables and 
compromise user accounts. For example, sending a GET request to http://192.168.26.3:8080/zoobar/db/person/person.db would 
return the following output - 

SQLite format 3@ -æ üõõÏWƒ	tablepersonpersonCREATE TABLE person ( username VARCHAR(128) NOT NULL, password VARCHAR(128), token VARCHAR(128), zoobars INTEGER NOT NULL, profile VARCHAR(5000) NOT NULL, PRIMARY KEY (username) )+?indexsqlite_autoindex_person_1person ²²LMKwfu263ba44c83c6c4811fb043b59e2f7a80000 dfasdfadfafasdfadfasdfaasdfasfa ùù	wfu

The attack is still limited because we can't actually change any of the data, we can just view it. Also, the password is 
hashed. But we can still use the username and password hash combo to do nefarious things. This works because the server code 
in http.c just appends "/home/httpd/lab"  to retrieve a path, which allows us to fetch all of the data stored in 
"/home/httpd/lab/", including all of the source code and databases. A fix that we could do would be to move all the sensitive 
code outside of the lab directory and in somewhere safer on the cs263 VM. Note that we wouldn't be able to use the same trick 
by doing someting like "GET /../../../home/httpd/your/directory" because the webserver parses out the ".." from the URL. 



Attack 2:
An attacker could implement a denial of service attack. For example, when overflowing the envvar[512] variable it's possible 
to overflow a file descriptor variable to stdin and cause a read() syscall to block. Therefore, an attacker could send a huge 
number of requests that all overflow the file descriptor to standard in, causing the program to run out of file descriptors 
and or for legitimate users to access the web server. This works because for every request that is sent, the web 
server needs to fork a process that ultimately blocks and never quits, and allows the attacker to spawn millions of forked 
processes on the web server ultimately causing it to crash. This vulnerability can be prepared against by doing rate limiting 
for requests, rate limiting per IP address, or a timeout that quits a read() blocking if it blocks indefinately. It can also 
be guarded against by preventing overflows with bounds checks of the buffers in our web server. The limitations of this 
specific attack to overwrite a file descriptor is that it requires a buffer overflow. In case there was no buffer overflow 
possible, the denial of service can be modified to just send a huge amount of spurious requests, causing the web server to run 
slowly or crash due to the amount of requests. 
